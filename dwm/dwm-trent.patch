diff -uNr dwm/config.def.h dwmt/config.def.h
--- dwm/config.def.h	2024-09-13 18:57:20.951232191 -0500
+++ dwmt/config.def.h	2024-09-12 17:34:46.990098615 -0500
@@ -1,34 +1,66 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
+#include <X11/X.h>
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
+static const int topbar             = 0;        /* 0 means bottom bar */
+static const char *fonts[]          = { "Symbols Nerd Font Mono:size=10","Roboto:size=16" };
+static const char grey1[]       = "#010101";
+static const char grey2[]       = "#1f1f1f";
+static const char grey3[]       = "#4d4d4d";
+static const char grey4[]       = "#808080";
+static const char grey5[]       = "#a4a4a4";
+static const char grey6[]       = "#cacaca";
+static const char grey7[]       = "#f2f2f2";
+static const char box_sel[]    = "#5d5d5d";
+static const char box_norm[]   = "#3d3d3d";
+static const char border_sel[]  = "#908070";
+static const char border_norm[] = "#708090";
 static const char *colors[][3]      = {
-	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+	/*                      forground   background  border   */
+	[SchemeIconBoxNorm] = { grey3,  NULL,  NULL },
+	[SchemeIconBoxSel]  = { grey4,  NULL,  NULL },
+	[SchemeIconBoxUrg]  = { grey3,  NULL,  NULL },
+
+	[SchemeIconNorm] = { grey6, NULL, NULL },
+	[SchemeIconSel]  = { grey7, NULL, NULL },
+	[SchemeIconUrg]  = { grey6,  NULL, NULL },
+
+	[SchemeLayoutNorm] = { grey6, NULL, NULL },
+	[SchemeLayoutSel]  = { grey5, NULL, NULL },
+
+	[SchemeClientNorm] = { grey5, NULL, border_norm },
+	[SchemeClientSel]  = { grey7, NULL, border_sel },
+
+	[SchemeStatusNorm] = { grey5, NULL, NULL },
+	[SchemeStatusSel]  = { grey7, NULL, NULL },
+
+	[SchemeBarNorm]  = { grey2, NULL, NULL },
+	[SchemeBarSel]  =  { grey2, NULL, NULL },
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const char *tags[] = {
+	"", // terminal
+	"󰖟", // browser
+	"󰉋", // general
+	"", // code
+	"󰝚", // spotify
+};
 
 static const Rule rules[] = {
 	/* xprop(1):
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	/* class        instance  title      tags mask       isfloating   monitor */
+	{ "Alacritty",  NULL,     NULL,           1,         0,           -1 },
+	{ "firefox",    NULL,     NULL,      1 << 1,         0,           -1 },
+	{ "Thunar",     NULL,     NULL,      1 << 2,         0,           -1 },
+	{ "Code",       NULL,     NULL,      1 << 3,         0,           -1 },
+	{ "vlc",        NULL,     NULL,      1 << 4,         0,            0 }
 };
 
 /* layout(s) */
@@ -39,13 +71,13 @@
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
-	{ "[]=",      tile },    /* first entry is default */
-	{ "><>",      NULL },    /* no layout function means floating behavior */
-	{ "[M]",      monocle },
+	{ "tiling",   tile },    /* first entry is default */
+	{ "floating", NULL },    /* no layout function means floating behavior */
+	{ "monocle",  monocle },
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -57,24 +89,48 @@
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *dmenucmd[] = { "rofi", "-show", "drun", "-theme", "android_notification", "-font", "\"Roboto 11\"", "-icon-theme", "Papirus", "-show-icons", NULL };
+static const char *termcmd[]  = { "alacritty", NULL };
+static const char *startup[]= { "./trentos/scripts/startup.sh", NULL };
+static const Arg autostartarg= {.v = startup };
 
 static const Key keys[] = {
 	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-	{ MODKEY,                       XK_b,      togglebar,      {0} },
+	{ MODKEY,                       XK_r,      spawn,          {.v = dmenucmd } },
+	{ MODKEY,                       XK_t,      spawn,          {.v = termcmd } },
+	{ MODKEY,                       XK_s,      spawn,          SHCMD ("vlc ~/Music/Minecraft-Volume-Beta/*.mp3 --loop")},
+	{ MODKEY,                       XK_c,      spawn,          SHCMD ("code")},
+	{ MODKEY,                       XK_b,      spawn,          SHCMD ("firefox")},
+	{ MODKEY,                       XK_a,      spawn,          SHCMD ("arandr")},
+	{ MODKEY,                       XK_e,      spawn,          SHCMD ("thunar")},
+	{ MODKEY,                       XK_n,      spawn,          SHCMD ("alacritty -e zsh -c 'python ~/trentos/notes.py'")},
+	{ MODKEY,                       XK_z,      spawn,          SHCMD ("alacritty -e zsh -c 'bluetuith --adapter-states=\"scan:yes\"'")},
+	{ MODKEY,                       0xfd1d,    spawn,          SHCMD ("shotgun -s")},
+	{ MODKEY,                       XK_Up,     spawn,          SHCMD ("~/trentos/scripts/apply-screenlayout.sh normal")},
+	{ MODKEY,                       XK_Right,  spawn,          SHCMD ("~/trentos/scripts/apply-screenlayout.sh right")},
+	{ MODKEY,                       XK_Left,   spawn,          SHCMD ("~/trentos/scripts/apply-screenlayout.sh left")},
+	{ MODKEY,                       XK_Down,   spawn,          SHCMD ("~/trentos/scripts/apply-screenlayout.sh inverted")},
+	{ 0,                            0x1008ff02, spawn,         SHCMD ("brightnessctl set +2%")},
+	{ 0,                            0x1008ff03, spawn,         SHCMD ("brightnessctl set 2%-")},
+	{ 0,                            0x1008ff11, spawn,         SHCMD ("pactl set-sink-volume 0 -2%")},
+	{ 0,                            0x1008ff12, spawn,         SHCMD ("pactl set-sink-mute 0 toggle")},
+	{ 0,                            0x1008ff13, spawn,         SHCMD ("pactl set-sink-volume 0 +2%")},
+	{ 0,                            0x1008FF14, spawn,         SHCMD ("playerctl play-pause")},
+	{ 0,                            0x1008FF16, spawn,         SHCMD ("playerctl previous")},
+	{ 0,                            0x1008FF17, spawn,         SHCMD ("playerctl next")},
+	{ MODKEY,                       XK_Shift_L, spawn,         SHCMD ("xdg-open https://chatgpt.com/")},
+	{ MODKEY,                       XK_v,      spawn,          SHCMD ("qemu-system-x86_64 -m 12G -cdrom vm-install.iso -cpu host -smp $(nproc) -boot order=d -drive file=vm,format=raw -accel kvm")},
+	{ MODKEY|ShiftMask,             XK_b,      togglebar,      {0} },
 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
+	{ MODKEY|ShiftMask,             XK_i,      incnmaster,     {.i = +1 } },
+	{ MODKEY|ShiftMask,             XK_d,      incnmaster,     {.i = -1 } },
 	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
 	{ MODKEY,                       XK_Return, zoom,           {0} },
 	{ MODKEY,                       XK_Tab,    view,           {0} },
-	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
+	{ MODKEY,                       XK_q,      killclient,     {0} },
+	{ MODKEY|ShiftMask,             XK_t,      setlayout,      {.v = &layouts[0]} },
 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                       XK_space,  setlayout,      {0} },
@@ -90,13 +146,10 @@
 	TAGKEYS(                        XK_3,                      2)
 	TAGKEYS(                        XK_4,                      3)
 	TAGKEYS(                        XK_5,                      4)
-	TAGKEYS(                        XK_6,                      5)
-	TAGKEYS(                        XK_7,                      6)
-	TAGKEYS(                        XK_8,                      7)
-	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
 };
 
+
 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
 static const Button buttons[] = {
diff -uNr dwm/drw.c dwmt/drw.c
--- dwm/drw.c	2024-09-13 18:57:20.951232191 -0500
+++ dwmt/drw.c	2024-09-12 09:41:47.353153053 -0500
@@ -70,6 +70,7 @@
 	drw->root = root;
 	drw->w = w;
 	drw->h = h;
+	drw->maxth = 0;
 	drw->drawable = XCreatePixmap(dpy, root, w, h, DefaultDepth(dpy, screen));
 	drw->gc = XCreateGC(dpy, root, 0, NULL);
 	XSetLineAttributes(dpy, drw->gc, 1, LineSolid, CapButt, JoinMiter);
@@ -166,6 +167,7 @@
 		if ((cur = xfont_create(drw, fonts[fontcount - i], NULL))) {
 			cur->next = ret;
 			ret = cur;
+			drw->maxth = MAX(ret->h, drw->maxth);
 		}
 	}
 	return (drw->fonts = ret);
@@ -262,7 +264,7 @@
 		w = invert ? invert : ~invert;
 	} else {
 		XSetForeground(drw->dpy, drw->gc, drw->scheme[invert ? ColFg : ColBg].pixel);
-		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w, h);
+		// XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w, h);
 		d = XftDrawCreate(drw->dpy, drw->drawable,
 		                  DefaultVisual(drw->dpy, drw->screen),
 		                  DefaultColormap(drw->dpy, drw->screen));
diff -uNr dwm/drw.h dwmt/drw.h
--- dwm/drw.h	2024-09-13 18:57:20.951232191 -0500
+++ dwmt/drw.h	2024-09-12 09:41:47.353153053 -0500
@@ -16,7 +16,7 @@
 typedef XftColor Clr;
 
 typedef struct {
-	unsigned int w, h;
+	unsigned int w, h, maxth;
 	Display *dpy;
 	int screen;
 	Window root;
diff -uNr dwm/dwm.c dwmt/dwm.c
--- dwm/dwm.c	2024-09-13 18:57:20.951232191 -0500
+++ dwmt/dwm.c	2024-09-12 09:41:47.353153053 -0500
@@ -59,7 +59,14 @@
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel }; /* color schemes */
+enum {
+	SchemeIconBoxNorm, SchemeIconBoxSel, SchemeIconBoxUrg,
+	SchemeIconNorm, SchemeIconSel, SchemeIconUrg,
+	SchemeLayoutNorm, SchemeLayoutSel,
+	SchemeClientNorm, SchemeClientSel,
+	SchemeStatusNorm, SchemeStatusSel,
+	SchemeBarNorm, SchemeBarSel
+}; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -699,20 +706,22 @@
 drawbar(Monitor *m)
 {
 	int x, w, tw = 0;
-	int boxs = drw->fonts->h / 9;
-	int boxw = drw->fonts->h / 6 + 2;
+	int boxs = drw->maxth / 9;
+	int boxw = drw->maxth / 6 + 2;
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
 
 	if (!m->showbar)
 		return;
+		
+	// draw bar
+	drw_setscheme(drw, scheme[m == selmon ? SchemeBarSel : SchemeBarNorm]);
+	drw_rect(drw, 0, 0, m->ww, bh, 1, 0);
 
 	/* draw status first so it can be overdrawn by tags later */
-	if (m == selmon) { /* status is only drawn on selected monitor */
-		drw_setscheme(drw, scheme[SchemeNorm]);
-		tw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
-	}
+	drw_setscheme(drw, scheme[m == selmon ? SchemeStatusSel : SchemeStatusNorm]);
+	tw = TEXTW(stext) - lrpad + 3; /* 3px right padding */
+	drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
 
 	for (c = m->clients; c; c = c->next) {
 		occ |= c->tags;
@@ -722,27 +731,27 @@
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
 		w = TEXTW(tags[i]);
-		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
+		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeIconBoxSel : urg & 1 << i ? SchemeIconBoxUrg : SchemeIconBoxNorm]);
+		drw_rect(drw, x + 1, 2, w - 2, bh - 4, 1, 0);
+
+		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeIconSel : urg & 1 << i ? SchemeIconUrg : SchemeIconNorm]);
+		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], 0);
 		if (occ & 1 << i)
 			drw_rect(drw, x + boxs, boxs, boxw, boxw,
 				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
-				urg & 1 << i);
+				0);
 		x += w;
 	}
 	w = TEXTW(m->ltsymbol);
-	drw_setscheme(drw, scheme[SchemeNorm]);
+	drw_setscheme(drw, scheme[m == selmon ? SchemeLayoutSel : SchemeLayoutNorm]);
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 
 	if ((w = m->ww - tw - x) > bh) {
 		if (m->sel) {
-			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
+			drw_setscheme(drw, scheme[m == selmon ? SchemeClientSel : SchemeClientNorm]);
 			drw_text(drw, x, 0, w, bh, lrpad / 2, m->sel->name, 0);
 			if (m->sel->isfloating)
 				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
-		} else {
-			drw_setscheme(drw, scheme[SchemeNorm]);
-			drw_rect(drw, x, 0, w, bh, 1, 1);
 		}
 	}
 	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
@@ -801,7 +810,7 @@
 		detachstack(c);
 		attachstack(c);
 		grabbuttons(c, 1);
-		XSetWindowBorder(dpy, c->win, scheme[SchemeSel][ColBorder].pixel);
+		XSetWindowBorder(dpy, c->win, scheme[SchemeClientSel][ColBorder].pixel);
 		setfocus(c);
 	} else {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
@@ -1063,7 +1072,7 @@
 
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
-	XSetWindowBorder(dpy, w, scheme[SchemeNorm][ColBorder].pixel);
+	XSetWindowBorder(dpy, w, scheme[SchemeClientNorm][ColBorder].pixel);
 	configure(c); /* propagates border_width, if size doesn't change */
 	updatewindowtype(c);
 	updatesizehints(c);
@@ -1385,6 +1394,7 @@
 	XEvent ev;
 	/* main event loop */
 	XSync(dpy, False);
+	spawn(&autostartarg);
 	while (running && !XNextEvent(dpy, &ev))
 		if (handler[ev.type])
 			handler[ev.type](&ev); /* call handler */
@@ -1561,8 +1571,8 @@
 	drw = drw_create(dpy, screen, root, sw, sh);
 	if (!drw_fontset_create(drw, fonts, LENGTH(fonts)))
 		die("no fonts could be loaded.");
-	lrpad = drw->fonts->h;
-	bh = drw->fonts->h + 2;
+	lrpad = drw->maxth;
+	bh = drw->maxth + 2;
 	updategeom();
 	/* init atoms */
 	utf8string = XInternAtom(dpy, "UTF8_STRING", False);
@@ -1768,7 +1778,7 @@
 	if (!c)
 		return;
 	grabbuttons(c, 0);
-	XSetWindowBorder(dpy, c->win, scheme[SchemeNorm][ColBorder].pixel);
+	XSetWindowBorder(dpy, c->win, scheme[SchemeClientNorm][ColBorder].pixel);
 	if (setfocus) {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
 		XDeleteProperty(dpy, root, netatom[NetActiveWindow]);
@@ -1851,7 +1861,7 @@
 }
 
 void
-updateclientlist(void)
+updateclientlist()
 {
 	Client *c;
 	Monitor *m;
Binary files dwm/dwm.png and dwmt/dwm.png differ
diff -uNr dwm/Makefile dwmt/Makefile
--- dwm/Makefile	2024-09-13 18:57:20.951232191 -0500
+++ dwmt/Makefile	2024-09-12 09:41:47.353153053 -0500
@@ -8,11 +8,6 @@
 
 all: dwm
 
-.c.o:
-	${CC} -c ${CFLAGS} $<
-
-${OBJ}: config.h config.mk
-
 config.h:
 	cp config.def.h $@
 
@@ -38,6 +33,11 @@
 	sed "s/VERSION/${VERSION}/g" < dwm.1 > ${DESTDIR}${MANPREFIX}/man1/dwm.1
 	chmod 644 ${DESTDIR}${MANPREFIX}/man1/dwm.1
 
+.c.o:
+	${CC} -c ${CFLAGS} $<
+
+${OBJ}: config.h config.mk
+
 uninstall:
 	rm -f ${DESTDIR}${PREFIX}/bin/dwm\
 		${DESTDIR}${MANPREFIX}/man1/dwm.1
